

/* This function accepts a socket FD and a ptr to a null terminated string 
 * string to send. This function will make sure all bytes are sent. 1 on success 0 on fa * failure */

int send_string(int sockfd, unsigned char* buffer) {
	int sent_bytes, bytes_to_send;
	bytes_to_send = strlen(buffer);
	while (bytes_to_send > 0) {
		sent_bytes = send(sockfd, buffer, bytes_to_send, 0);
		if (sent_bytes == -1) 
			return 0; // returns zero on error 
		bytes_to_send -= sent_bytes;
		buffer += sent_bytes;		
	}
	return 1; // return 1 on success 
}

/* This function accepts some socket FD and a ptr to a destination buffer 
 * It will recieve from the socket until the EOL byte sequence is seen. 
 * The EOL is read from the the socket but the buffer is null terminated befor
 * these bytes.
 * Returns the size of the read bytes (without EOL bytes) */
int recv_line(int sockfd, unsigned char* dest_buffer) {
#define EOL "\r\n" // end of line byte sequence 
#define EOL_SIZE 2 
	unsigned char * ptr;
	int eol_matched = 0;
	
	ptr = dest_buffer;
	while (recv(sockfd, ptr, 1, 0) == 1) { // read a single byte 
		if (*ptr == EOL[eol_matched]) {
			eol_matched++;
			if (eol_matched == EOL_SIZE) { // all bytes match the termination sequence
				*(ptr+1-EOL_SIZE) = '\0'; // terminate the string
				return strlen(dest_buffer); // return the number of bytes received
			}
		} else {	
			eol_matched = 0;
		}
		ptr++; // increment ptr to the next byte 
	} 
	return 0; // we didn't find EOL characters 
}

